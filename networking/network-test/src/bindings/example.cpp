// Generated by `wit-bindgen` 0.43.0. DO NOT EDIT!

// Ensure that the *_component_type.o object is linked in
#ifdef __wasm32__
extern void __component_type_object_force_link_example(void);
void __component_type_object_force_link_example_public_use_in_this_compilation_unit(void) {
  __component_type_object_force_link_example();
}
#endif
#include "example_cpp.h"
#include <cstdlib> // realloc

extern "C" void *cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size);

__attribute__((__weak__, __export_name__("cabi_realloc")))
void *cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size) {
  (void) old_size;
  if (new_size == 0) return (void*) align;
  void *ret = realloc(ptr, new_size);
  if (!ret) abort();
  return ret;
}


extern "C" __attribute__((__export_name__("hello-world")))
uint8_t * hello_world()
{
  auto result0 = exports::example::HelloWorld();
  static uintptr_t ret_area[((2*sizeof(void*))+sizeof(uintptr_t)-1)/sizeof(uintptr_t)];
  uint8_t* ptr1 = (uint8_t*)(&ret_area);
  auto const&vec2 = result0;
  auto ptr2 = (uint8_t*)(vec2.data());
  auto len2 = (size_t)(vec2.size());
  result0.leak();

  *((size_t*)(ptr1 + sizeof(void*))) = len2;
  *((uint8_t**)(ptr1 + 0)) = ptr2;
  return ptr1;
}
extern "C" __attribute__((__weak__, __export_name__("cabi_post_hello_world")))
void cabi_post_hello_world(uint8_t * arg0) {
  if ((*((size_t*) (arg0 + sizeof(void*)))) > 0) {
    wit::string::drop_raw((void*) (*((uint8_t**) (arg0 + 0))));
  }
}

// Component Adapters
